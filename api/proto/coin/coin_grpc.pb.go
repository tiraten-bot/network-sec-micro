// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/coin/coin.proto

package coin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoinService_GetBalance_FullMethodName            = "/coin.CoinService/GetBalance"
	CoinService_DeductCoins_FullMethodName           = "/coin.CoinService/DeductCoins"
	CoinService_AddCoins_FullMethodName              = "/coin.CoinService/AddCoins"
	CoinService_TransferCoins_FullMethodName         = "/coin.CoinService/TransferCoins"
	CoinService_GetTransactionHistory_FullMethodName = "/coin.CoinService/GetTransactionHistory"
)

// CoinServiceClient is the client API for CoinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Coin Service
type CoinServiceClient interface {
	// Get warrior's coin balance
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	// Deduct coins from warrior's balance
	DeductCoins(ctx context.Context, in *DeductCoinsRequest, opts ...grpc.CallOption) (*DeductCoinsResponse, error)
	// Add coins to warrior's balance
	AddCoins(ctx context.Context, in *AddCoinsRequest, opts ...grpc.CallOption) (*AddCoinsResponse, error)
	// Transfer coins between warriors
	TransferCoins(ctx context.Context, in *TransferCoinsRequest, opts ...grpc.CallOption) (*TransferCoinsResponse, error)
	// Get transaction history
	GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error)
}

type coinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinServiceClient(cc grpc.ClientConnInterface) CoinServiceClient {
	return &coinServiceClient{cc}
}

func (c *coinServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, CoinService_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinServiceClient) DeductCoins(ctx context.Context, in *DeductCoinsRequest, opts ...grpc.CallOption) (*DeductCoinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeductCoinsResponse)
	err := c.cc.Invoke(ctx, CoinService_DeductCoins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinServiceClient) AddCoins(ctx context.Context, in *AddCoinsRequest, opts ...grpc.CallOption) (*AddCoinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCoinsResponse)
	err := c.cc.Invoke(ctx, CoinService_AddCoins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinServiceClient) TransferCoins(ctx context.Context, in *TransferCoinsRequest, opts ...grpc.CallOption) (*TransferCoinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferCoinsResponse)
	err := c.cc.Invoke(ctx, CoinService_TransferCoins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinServiceClient) GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionHistoryResponse)
	err := c.cc.Invoke(ctx, CoinService_GetTransactionHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinServiceServer is the server API for CoinService service.
// All implementations must embed UnimplementedCoinServiceServer
// for forward compatibility.
//
// Coin Service
type CoinServiceServer interface {
	// Get warrior's coin balance
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	// Deduct coins from warrior's balance
	DeductCoins(context.Context, *DeductCoinsRequest) (*DeductCoinsResponse, error)
	// Add coins to warrior's balance
	AddCoins(context.Context, *AddCoinsRequest) (*AddCoinsResponse, error)
	// Transfer coins between warriors
	TransferCoins(context.Context, *TransferCoinsRequest) (*TransferCoinsResponse, error)
	// Get transaction history
	GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error)
	mustEmbedUnimplementedCoinServiceServer()
}

// UnimplementedCoinServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoinServiceServer struct{}

func (UnimplementedCoinServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedCoinServiceServer) DeductCoins(context.Context, *DeductCoinsRequest) (*DeductCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeductCoins not implemented")
}
func (UnimplementedCoinServiceServer) AddCoins(context.Context, *AddCoinsRequest) (*AddCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCoins not implemented")
}
func (UnimplementedCoinServiceServer) TransferCoins(context.Context, *TransferCoinsRequest) (*TransferCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCoins not implemented")
}
func (UnimplementedCoinServiceServer) GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionHistory not implemented")
}
func (UnimplementedCoinServiceServer) mustEmbedUnimplementedCoinServiceServer() {}
func (UnimplementedCoinServiceServer) testEmbeddedByValue()                     {}

// UnsafeCoinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinServiceServer will
// result in compilation errors.
type UnsafeCoinServiceServer interface {
	mustEmbedUnimplementedCoinServiceServer()
}

func RegisterCoinServiceServer(s grpc.ServiceRegistrar, srv CoinServiceServer) {
	// If the following call pancis, it indicates UnimplementedCoinServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoinService_ServiceDesc, srv)
}

func _CoinService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinService_DeductCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeductCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).DeductCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_DeductCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).DeductCoins(ctx, req.(*DeductCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinService_AddCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).AddCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_AddCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).AddCoins(ctx, req.(*AddCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinService_TransferCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).TransferCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_TransferCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).TransferCoins(ctx, req.(*TransferCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinService_GetTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).GetTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_GetTransactionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).GetTransactionHistory(ctx, req.(*GetTransactionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoinService_ServiceDesc is the grpc.ServiceDesc for CoinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coin.CoinService",
	HandlerType: (*CoinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _CoinService_GetBalance_Handler,
		},
		{
			MethodName: "DeductCoins",
			Handler:    _CoinService_DeductCoins_Handler,
		},
		{
			MethodName: "AddCoins",
			Handler:    _CoinService_AddCoins_Handler,
		},
		{
			MethodName: "TransferCoins",
			Handler:    _CoinService_TransferCoins_Handler,
		},
		{
			MethodName: "GetTransactionHistory",
			Handler:    _CoinService_GetTransactionHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/coin/coin.proto",
}
