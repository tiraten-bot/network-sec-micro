// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/weapon/weapon.proto

package weapon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WeaponService_GetWeapon_FullMethodName             = "/weapon.WeaponService/GetWeapon"
	WeaponService_CalculateWarriorPower_FullMethodName = "/weapon.WeaponService/CalculateWarriorPower"
)

// WeaponServiceClient is the client API for WeaponService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Weapon Service (gRPC methods for service-to-service communication)
type WeaponServiceClient interface {
	// Get weapon details (for other services)
	GetWeapon(ctx context.Context, in *GetWeaponRequest, opts ...grpc.CallOption) (*GetWeaponResponse, error)
	// Calculate warrior's total power based on owned weapons
	CalculateWarriorPower(ctx context.Context, in *CalculateWarriorPowerRequest, opts ...grpc.CallOption) (*CalculateWarriorPowerResponse, error)
}

type weaponServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWeaponServiceClient(cc grpc.ClientConnInterface) WeaponServiceClient {
	return &weaponServiceClient{cc}
}

func (c *weaponServiceClient) GetWeapon(ctx context.Context, in *GetWeaponRequest, opts ...grpc.CallOption) (*GetWeaponResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWeaponResponse)
	err := c.cc.Invoke(ctx, WeaponService_GetWeapon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaponServiceClient) CalculateWarriorPower(ctx context.Context, in *CalculateWarriorPowerRequest, opts ...grpc.CallOption) (*CalculateWarriorPowerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateWarriorPowerResponse)
	err := c.cc.Invoke(ctx, WeaponService_CalculateWarriorPower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeaponServiceServer is the server API for WeaponService service.
// All implementations must embed UnimplementedWeaponServiceServer
// for forward compatibility.
//
// Weapon Service (gRPC methods for service-to-service communication)
type WeaponServiceServer interface {
	// Get weapon details (for other services)
	GetWeapon(context.Context, *GetWeaponRequest) (*GetWeaponResponse, error)
	// Calculate warrior's total power based on owned weapons
	CalculateWarriorPower(context.Context, *CalculateWarriorPowerRequest) (*CalculateWarriorPowerResponse, error)
	mustEmbedUnimplementedWeaponServiceServer()
}

// UnimplementedWeaponServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWeaponServiceServer struct{}

func (UnimplementedWeaponServiceServer) GetWeapon(context.Context, *GetWeaponRequest) (*GetWeaponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeapon not implemented")
}
func (UnimplementedWeaponServiceServer) CalculateWarriorPower(context.Context, *CalculateWarriorPowerRequest) (*CalculateWarriorPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateWarriorPower not implemented")
}
func (UnimplementedWeaponServiceServer) mustEmbedUnimplementedWeaponServiceServer() {}
func (UnimplementedWeaponServiceServer) testEmbeddedByValue()                       {}

// UnsafeWeaponServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeaponServiceServer will
// result in compilation errors.
type UnsafeWeaponServiceServer interface {
	mustEmbedUnimplementedWeaponServiceServer()
}

func RegisterWeaponServiceServer(s grpc.ServiceRegistrar, srv WeaponServiceServer) {
	// If the following call pancis, it indicates UnimplementedWeaponServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WeaponService_ServiceDesc, srv)
}

func _WeaponService_GetWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaponServiceServer).GetWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaponService_GetWeapon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaponServiceServer).GetWeapon(ctx, req.(*GetWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaponService_CalculateWarriorPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateWarriorPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaponServiceServer).CalculateWarriorPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaponService_CalculateWarriorPower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaponServiceServer).CalculateWarriorPower(ctx, req.(*CalculateWarriorPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WeaponService_ServiceDesc is the grpc.ServiceDesc for WeaponService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeaponService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weapon.WeaponService",
	HandlerType: (*WeaponServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeapon",
			Handler:    _WeaponService_GetWeapon_Handler,
		},
		{
			MethodName: "CalculateWarriorPower",
			Handler:    _WeaponService_CalculateWarriorPower_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/weapon/weapon.proto",
}
