// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/warrior/warrior.proto

package warrior

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WarriorService_GetWarriorByUsername_FullMethodName = "/warrior.WarriorService/GetWarriorByUsername"
	WarriorService_GetWarriorByID_FullMethodName       = "/warrior.WarriorService/GetWarriorByID"
	WarriorService_UpdateWarriorPower_FullMethodName   = "/warrior.WarriorService/UpdateWarriorPower"
)

// WarriorServiceClient is the client API for WarriorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Warrior Service (gRPC methods for service-to-service communication)
type WarriorServiceClient interface {
	// Get warrior by username (for other services)
	GetWarriorByUsername(ctx context.Context, in *GetWarriorByUsernameRequest, opts ...grpc.CallOption) (*GetWarriorByUsernameResponse, error)
	// Get warrior by ID (for other services)
	GetWarriorByID(ctx context.Context, in *GetWarriorByIDRequest, opts ...grpc.CallOption) (*GetWarriorByIDResponse, error)
	// Update warrior's power/stats
	UpdateWarriorPower(ctx context.Context, in *UpdateWarriorPowerRequest, opts ...grpc.CallOption) (*UpdateWarriorPowerResponse, error)
}

type warriorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWarriorServiceClient(cc grpc.ClientConnInterface) WarriorServiceClient {
	return &warriorServiceClient{cc}
}

func (c *warriorServiceClient) GetWarriorByUsername(ctx context.Context, in *GetWarriorByUsernameRequest, opts ...grpc.CallOption) (*GetWarriorByUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWarriorByUsernameResponse)
	err := c.cc.Invoke(ctx, WarriorService_GetWarriorByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warriorServiceClient) GetWarriorByID(ctx context.Context, in *GetWarriorByIDRequest, opts ...grpc.CallOption) (*GetWarriorByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWarriorByIDResponse)
	err := c.cc.Invoke(ctx, WarriorService_GetWarriorByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warriorServiceClient) UpdateWarriorPower(ctx context.Context, in *UpdateWarriorPowerRequest, opts ...grpc.CallOption) (*UpdateWarriorPowerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWarriorPowerResponse)
	err := c.cc.Invoke(ctx, WarriorService_UpdateWarriorPower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarriorServiceServer is the server API for WarriorService service.
// All implementations must embed UnimplementedWarriorServiceServer
// for forward compatibility.
//
// Warrior Service (gRPC methods for service-to-service communication)
type WarriorServiceServer interface {
	// Get warrior by username (for other services)
	GetWarriorByUsername(context.Context, *GetWarriorByUsernameRequest) (*GetWarriorByUsernameResponse, error)
	// Get warrior by ID (for other services)
	GetWarriorByID(context.Context, *GetWarriorByIDRequest) (*GetWarriorByIDResponse, error)
	// Update warrior's power/stats
	UpdateWarriorPower(context.Context, *UpdateWarriorPowerRequest) (*UpdateWarriorPowerResponse, error)
	mustEmbedUnimplementedWarriorServiceServer()
}

// UnimplementedWarriorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWarriorServiceServer struct{}

func (UnimplementedWarriorServiceServer) GetWarriorByUsername(context.Context, *GetWarriorByUsernameRequest) (*GetWarriorByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarriorByUsername not implemented")
}
func (UnimplementedWarriorServiceServer) GetWarriorByID(context.Context, *GetWarriorByIDRequest) (*GetWarriorByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarriorByID not implemented")
}
func (UnimplementedWarriorServiceServer) UpdateWarriorPower(context.Context, *UpdateWarriorPowerRequest) (*UpdateWarriorPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWarriorPower not implemented")
}
func (UnimplementedWarriorServiceServer) mustEmbedUnimplementedWarriorServiceServer() {}
func (UnimplementedWarriorServiceServer) testEmbeddedByValue()                        {}

// UnsafeWarriorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarriorServiceServer will
// result in compilation errors.
type UnsafeWarriorServiceServer interface {
	mustEmbedUnimplementedWarriorServiceServer()
}

func RegisterWarriorServiceServer(s grpc.ServiceRegistrar, srv WarriorServiceServer) {
	// If the following call pancis, it indicates UnimplementedWarriorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WarriorService_ServiceDesc, srv)
}

func _WarriorService_GetWarriorByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWarriorByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarriorServiceServer).GetWarriorByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarriorService_GetWarriorByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarriorServiceServer).GetWarriorByUsername(ctx, req.(*GetWarriorByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarriorService_GetWarriorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWarriorByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarriorServiceServer).GetWarriorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarriorService_GetWarriorByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarriorServiceServer).GetWarriorByID(ctx, req.(*GetWarriorByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarriorService_UpdateWarriorPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWarriorPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarriorServiceServer).UpdateWarriorPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarriorService_UpdateWarriorPower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarriorServiceServer).UpdateWarriorPower(ctx, req.(*UpdateWarriorPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WarriorService_ServiceDesc is the grpc.ServiceDesc for WarriorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarriorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warrior.WarriorService",
	HandlerType: (*WarriorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWarriorByUsername",
			Handler:    _WarriorService_GetWarriorByUsername_Handler,
		},
		{
			MethodName: "GetWarriorByID",
			Handler:    _WarriorService_GetWarriorByID_Handler,
		},
		{
			MethodName: "UpdateWarriorPower",
			Handler:    _WarriorService_UpdateWarriorPower_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/warrior/warrior.proto",
}
