version: '3.8'

services:
  # PostgreSQL Database (resmi image kullanıyoruz)
  postgres:
    image: postgres:15-alpine
    container_name: warrior-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: warrior_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - warrior-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database (resmi image kullanıyoruz)
  mongodb:
    image: mongo:7.0
    container_name: weapon-mongodb
    environment:
      MONGO_INITDB_DATABASE: weapon_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - warrior-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - warrior-network
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - warrior-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Warrior Service
  warrior:
    build:
      context: .
      dockerfile: dockerfiles/warrior.dockerfile
    container_name: warrior-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: warrior_db
      DB_SSLMODE: disable
      PORT: 8080
      GIN_MODE: release
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - warrior-network
    restart: unless-stopped

  # Weapon Service
  weapon:
    build:
      context: .
      dockerfile: dockerfiles/weapon.dockerfile
    container_name: weapon-service
    environment:
      MONGODB_URI: mongodb://mongodb:27017
      MONGODB_DB: weapon_db
      PORT: 8081
      GIN_MODE: release
      KAFKA_BROKERS: kafka:9092
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - warrior-network
    restart: unless-stopped

  # Coin Service (gRPC)
  coin:
    build:
      context: .
      dockerfile: dockerfiles/coin.dockerfile
    container_name: coin-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: warrior_db
      DB_SSLMODE: disable
      GRPC_PORT: 50051
      KAFKA_BROKERS: kafka:9092
    ports:
      - "50051:50051"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - warrior-network
    restart: unless-stopped

networks:
  warrior-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
